"""
Plot RDMs of Haxby dataset
 
"""

from matplotlib import pyplot as plt

### Load Haxby dataset ########################################################
import numpy as np
from nilearn import datasets, input_data, image
from nilearn import plotting
from nibabel import load, save

from sklearn.svm import SVC
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.multiclass import OneVsOneClassifier, OneVsRestClassifier
# from sklearn.pipeline import Pipeline
from sklearn import linear_model
from sklearn import preprocessing

from sklearn.cross_validation import cross_val_score
from ni_rrr import fit_predict
from scipy.stats import spearmanr
from scipy import stats, linalg
from joblib import Parallel, delayed

haxby_dataset = datasets.fetch_haxby_simple()
func_filename = haxby_dataset.func
mask_filename = haxby_dataset.mask

atlas_filename, labels = datasets.fetch_harvard_oxford(
    'cort-maxprob-thr25-2mm', symmetric_split=True)


affine = load(mask_filename).get_affine()
shape = load(mask_filename).get_shape()
atlas = image.resample_img(atlas_filename, target_affine=affine,
                           target_shape=shape, interpolation='nearest')
roi_masker = input_data.NiftiLabelsMasker(labels_img=atlas,
                                          mask_img=mask_filename)
roi_masker.fit(mask_filename) ## just to have it fitted


y, session = np.loadtxt(haxby_dataset.session_target).astype('int').T
conditions = np.recfromtxt(haxby_dataset.conditions_target)['f0']

# Remove the rest condition, it is not very interesting
non_rest = conditions != b'rest'
conditions = conditions[non_rest]
y = y[non_rest]

# Get the labels of the numerical conditions represented by the vector y
unique_conditions, order = np.unique(conditions, return_index=True)
# Sort the conditions by the order of appearance
unique_conditions = unique_conditions[np.argsort(order)]

### Loading step ##############################################################
# For decoding, standardizing is often very important
nifti_masker = input_data.NiftiMasker(
    mask_img=mask_filename, standardize=True, detrend=True,
    sessions=session, smoothing_fwhm=None,
    memory="nilearn_cache", memory_level=1)
X = nifti_masker.fit_transform(func_filename)
X = X[non_rest]
session = session[non_rest]

x = X[session == 0, atlas_labels == 0]
K = np.corrcoef(x)
plt.figure(figiser=(5, 5))
plt.imshow(K, interpolation='nearest')
plt.axis('off')
plt.show() 
